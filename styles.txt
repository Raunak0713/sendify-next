BOLT

import React, { useEffect, useState } from "react";
import { io } from "socket.io-client";
import { Bell, X, ExternalLink } from "lucide-react";
import { Popover, PopoverTrigger, PopoverContent } from "./Popover";

type NotificationPayload = {
  content?: string;
  buttonText?: string;
  buttonUrl?: string;
  timestamp?: number;
};

type NotificationFeedProps = {
  userId: string;
  align?: "start" | "center" | "end";
};

export function NotificationFeed({ userId, align = "end" }: NotificationFeedProps) {
  const [notifications, setNotifications] = useState<NotificationPayload[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [hasNewNotifications, setHasNewNotifications] = useState(false);
  const socket = io("https://sendify-socket.onrender.com");

  useEffect(() => {
    socket.emit("register", userId);

    socket.on("new-notification", (data: NotificationPayload) => {
      const enhancedData = {
        ...data,
        timestamp: Date.now()
      };
      setNotifications((prev) => [enhancedData, ...prev]);
      setHasNewNotifications(true);
    });

    return () => {
      socket.off("new-notification");
    };
  }, [userId]);

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (open) {
      setHasNewNotifications(false);
    }
  };

  const clearNotification = (index: number) => {
    setNotifications(prev => prev.filter((_, i) => i !== index));
  };

  const formatTimestamp = (timestamp?: number) => {
    if (!timestamp) return '';
    
    const now = new Date();
    const notifTime = new Date(timestamp);
    const diffMs = now.getTime() - notifTime.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours}h ago`;
    
    const diffDays = Math.floor(diffHours / 24);
    if (diffDays < 7) return `${diffDays}d ago`;
    
    return notifTime.toLocaleDateString();
  };

  return (
    <Popover open={isOpen} onOpenChange={handleOpenChange}>
      <PopoverTrigger className="relative cursor-pointer group">
        <div className={`p-2 rounded-full transition-all duration-300 ${hasNewNotifications ? 'bg-purple-100/10' : 'hover:bg-gray-800'}`}>
          <Bell className={`w-5 h-5 transition-colors duration-300 ${hasNewNotifications ? 'text-purple-400' : 'text-gray-300 group-hover:text-white'}`} />
        </div>
        {notifications.length > 0 && (
          <div className={`absolute -top-1 -right-1 ${hasNewNotifications ? 'animate-pulse' : ''} bg-gradient-to-r from-purple-500 to-pink-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center shadow-lg shadow-purple-500/20`}>
            {notifications.length > 9 ? "9+" : notifications.length}
          </div>
        )}
      </PopoverTrigger>
      <PopoverContent 
        align={align} 
        className="mt-2 w-[380px] max-h-[480px] bg-gradient-to-b from-gray-900 to-gray-950 border border-gray-800 rounded-xl shadow-2xl shadow-purple-500/5 overflow-hidden flex flex-col p-0"
      >
        <div className="sticky top-0 z-10 bg-gray-900 border-b border-gray-800 px-4 py-3 flex justify-between items-center">
          <h3 className="font-medium text-gray-200">Notifications</h3>
          {notifications.length > 0 && (
            <button 
              onClick={() => setNotifications([])}
              className="text-xs text-gray-400 hover:text-gray-200 transition-colors"
            >
              Clear all
            </button>
          )}
        </div>
        
        <div className="overflow-y-auto flex-1 custom-scrollbar">
          {notifications.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[300px] p-6 text-center">
              <div className="w-16 h-16 rounded-full bg-gray-800 flex items-center justify-center mb-4">
                <Bell className="w-8 h-8 text-gray-600" />
              </div>
              <p className="text-gray-400 mb-1">No notifications yet</p>
              <p className="text-gray-600 text-sm">We'll notify you when something arrives</p>
            </div>
          ) : (
            <div className="p-3 space-y-2">
              {notifications.map((item, index) => (
                <div 
                  key={index} 
                  className="group relative bg-gray-800/50 hover:bg-gray-800 backdrop-blur-sm rounded-lg p-4 transition-all duration-300 border border-gray-800 hover:border-gray-700"
                >
                  <div className="flex items-start gap-3">
                    <div className="min-w-[8px] h-2 mt-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <p className="text-gray-200 text-sm leading-relaxed">{item.content || "No content available"}</p>
                        <button 
                          onClick={() => clearNotification(index)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity text-gray-500 hover:text-gray-300 p-1"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                      
                      {item.buttonText && item.buttonUrl && (
                        <div className="mt-3">
                          <a
                            href={item.buttonUrl}
                            className="inline-flex items-center gap-1.5 text-xs bg-gradient-to-r from-purple-500/10 to-pink-500/10 hover:from-purple-500/20 hover:to-pink-500/20 text-purple-300 px-3 py-1.5 rounded-md transition-all duration-300 border border-purple-500/20"
                          >
                            {item.buttonText}
                            <ExternalLink className="w-3 h-3" />
                          </a>
                        </div>
                      )}
                      
                      <div className="mt-2 text-xs text-gray-500">
                        {formatTimestamp(item.timestamp)}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </PopoverContent>
    </Popover>
  );
}









V0 Very Nice Dark



"use client"

import { useEffect, useState } from "react"
import { io } from "socket.io-client"
import { Bell, X, Clock, ExternalLink } from "lucide-react"
import { Popover, PopoverTrigger, PopoverContent } from "./Popover"
import { motion, AnimatePresence } from "framer-motion"

type NotificationPayload = {
  content?: string
  buttonText?: string
  buttonUrl?: string
  timestamp?: string
}

type NotificationFeedProps = {
  userId: string
  align?: "start" | "center" | "end"
}

export function NotificationFeed({ userId, align = "end" }: NotificationFeedProps) {
  const [notifications, setNotifications] = useState<NotificationPayload[]>([])
  const [isOpen, setIsOpen] = useState(false)
  const socket = io("https://sendify-socket.onrender.com")

  useEffect(() => {
    socket.emit("register", userId)

    socket.on("new-notification", (data: NotificationPayload) => {
      console.log("Received notification:", data)
      // Add current timestamp if not provided
      const enhancedData = {
        ...data,
        timestamp: data.timestamp || new Date().toISOString(),
      }
      setNotifications((prev) => [enhancedData, ...prev])
    })

    return () => {
      socket.off("new-notification")
    }
  }, [userId, socket]) // Added socket to dependencies

  const clearNotifications = () => {
    setNotifications([])
  }

  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp)
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
  }

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger className="relative cursor-pointer group">
        <div className="relative p-2 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 shadow-lg transition-all duration-300 group-hover:bg-white/20">
          <Bell className="w-5 h-5 transition-all duration-300 group-hover:scale-110" />
          <AnimatePresence>
            {notifications.length > 0 && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                exit={{ scale: 0 }}
                className="absolute -top-1 -right-1 bg-gradient-to-r from-rose-500 to-pink-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center shadow-lg"
              >
                {notifications.length > 9 ? "9+" : notifications.length}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </PopoverTrigger>
      <PopoverContent
        align={align}
        className="mt-2 w-[420px] max-h-[420px] bg-gradient-to-b from-slate-900 to-slate-800 border border-slate-700 rounded-xl shadow-2xl overflow-hidden p-0"
      >
        <div className="sticky top-0 z-10 backdrop-blur-md bg-slate-900/80 border-b border-slate-700 p-4 flex justify-between items-center">
          <h3 className="text-white font-medium">Notifications</h3>
          {notifications.length > 0 && (
            <button
              onClick={clearNotifications}
              className="text-slate-400 hover:text-white transition-colors duration-200 flex items-center text-xs gap-1"
            >
              <X className="w-3.5 h-3.5" />
              <span>Clear all</span>
            </button>
          )}
        </div>

        <div className="overflow-y-auto max-h-[400px] p-3 space-y-3 custom-scrollbar">
          <AnimatePresence>
            {notifications.length === 0 ? (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex flex-col items-center justify-center h-[300px] text-center p-6"
              >
                <div className="w-16 h-16 mb-4 rounded-full bg-slate-700/50 flex items-center justify-center">
                  <Bell className="w-8 h-8 text-slate-500" />
                </div>
                <p className="text-slate-400 font-medium">No notifications yet</p>
                <p className="text-slate-500 text-sm mt-1">We'll notify you when something arrives</p>
              </motion.div>
            ) : (
              notifications.map((item, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, x: -100 }}
                  transition={{ duration: 0.3 }}
                  className="bg-gradient-to-r from-slate-800 to-slate-700 hover:from-slate-700 hover:to-slate-600 border border-slate-600/50 rounded-lg p-4 transition-all duration-300 shadow-lg hover:shadow-xl"
                >
                  <div className="flex items-start gap-3">
                    <div className="min-w-2 h-2 mt-2 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full" />
                    <div className="flex-1">
                      <p className="text-white text-sm">{item.content || "No content available"}</p>

                      <div className="flex items-center mt-2 text-xs text-slate-400">
                        <Clock className="w-3 h-3 mr-1" />
                        <span>{item.timestamp ? formatTime(item.timestamp) : "Just now"}</span>
                      </div>

                      {item.buttonText && item.buttonUrl && (
                        <div className="mt-3">
                          <a
                            href={item.buttonUrl}
                            className="inline-flex items-center gap-1.5 text-xs font-medium bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white px-3 py-1.5 rounded-md transition-all duration-300 shadow-lg hover:shadow-cyan-500/20"
                          >
                            {item.buttonText}
                            <ExternalLink className="w-3 h-3" />
                          </a>
                        </div>
                      )}
                    </div>
                  </div>
                </motion.div>
              ))
            )}
          </AnimatePresence>
        </div>
      </PopoverContent>
    </Popover>
  )
}




